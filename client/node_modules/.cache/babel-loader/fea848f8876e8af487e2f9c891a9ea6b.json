{"ast":null,"code":"'use strict';\n\nvar PropTypes = require('prop-types');\n\nvar React = require('react');\n\nvar createReactClass = require('create-react-class');\n\nvar d3 = require('d3');\n\nvar CellContainer = require('./CellContainer');\n\nmodule.exports = createReactClass({\n  displayName: 'DataSeries',\n  propTypes: {\n    data: PropTypes.array,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n    var treemap = d3.layout.treemap() // make sure calculation loop through all objects inside array\n    .children(function (d) {\n      return d;\n    }).size([props.width, props.height]).sticky(true).value(function (d) {\n      return d.value;\n    });\n    var tree = treemap(props.data);\n    var cells = tree.map(function (node, idx) {\n      return React.createElement(CellContainer, {\n        key: idx,\n        x: node.x,\n        y: node.y,\n        width: node.dx,\n        height: node.dy,\n        fill: props.colors(props.colorAccessor(node, idx)),\n        label: node.label,\n        fontSize: props.fontSize,\n        textColor: props.textColor,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n    return React.createElement('g', {\n      transform: props.transform,\n      className: 'treemap'\n    }, cells);\n  }\n});","map":{"version":3,"sources":["/Users/apple/Desktop/Personal_Projects/greener-mern/node_modules/rd3/build/cjs/treemap/DataSeries.js"],"names":["PropTypes","require","React","createReactClass","d3","CellContainer","module","exports","displayName","propTypes","data","array","colors","func","colorAccessor","width","number","height","getDefaultProps","scale","category20c","d","idx","render","props","treemap","layout","children","size","sticky","value","tree","cells","map","node","createElement","key","x","y","dx","dy","fill","label","fontSize","textColor","hoverAnimation","transform","className"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,gBAAgB,CAAC;AAEhCK,EAAAA,WAAW,EAAE,YAFmB;AAIhCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEV,SAAS,CAACW,KADP;AAETC,IAAAA,MAAM,EAAEZ,SAAS,CAACa,IAFT;AAGTC,IAAAA,aAAa,EAAEd,SAAS,CAACa,IAHhB;AAITE,IAAAA,KAAK,EAAEf,SAAS,CAACgB,MAJR;AAKTC,IAAAA,MAAM,EAAEjB,SAAS,CAACgB;AALT,GAJqB;AAYhCE,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,WAAO;AACLR,MAAAA,IAAI,EAAE,EADD;AAELE,MAAAA,MAAM,EAAER,EAAE,CAACe,KAAH,CAASC,WAAT,EAFH;AAGLN,MAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBO,CAAvB,EAA0BC,GAA1B,EAA+B;AAC5C,eAAOA,GAAP;AACD;AALI,KAAP;AAOD,GApB+B;AAqBhCC,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,QAAIC,KAAK,GAAG,KAAKA,KAAjB;AAEA,QAAIC,OAAO,GAAGrB,EAAE,CAACsB,MAAH,CAAUD,OAAV,GACd;AADc,KAEbE,QAFa,CAEJ,UAAUN,CAAV,EAAa;AACrB,aAAOA,CAAP;AACD,KAJa,EAIXO,IAJW,CAIN,CAACJ,KAAK,CAACT,KAAP,EAAcS,KAAK,CAACP,MAApB,CAJM,EAIuBY,MAJvB,CAI8B,IAJ9B,EAIoCC,KAJpC,CAI0C,UAAUT,CAAV,EAAa;AACnE,aAAOA,CAAC,CAACS,KAAT;AACD,KANa,CAAd;AAQA,QAAIC,IAAI,GAAGN,OAAO,CAACD,KAAK,CAACd,IAAP,CAAlB;AAEA,QAAIsB,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAS,UAAUC,IAAV,EAAgBZ,GAAhB,EAAqB;AACxC,aAAOpB,KAAK,CAACiC,aAAN,CAAoB9B,aAApB,EAAmC;AACxC+B,QAAAA,GAAG,EAAEd,GADmC;AAExCe,QAAAA,CAAC,EAAEH,IAAI,CAACG,CAFgC;AAGxCC,QAAAA,CAAC,EAAEJ,IAAI,CAACI,CAHgC;AAIxCvB,QAAAA,KAAK,EAAEmB,IAAI,CAACK,EAJ4B;AAKxCtB,QAAAA,MAAM,EAAEiB,IAAI,CAACM,EAL2B;AAMxCC,QAAAA,IAAI,EAAEjB,KAAK,CAACZ,MAAN,CAAaY,KAAK,CAACV,aAAN,CAAoBoB,IAApB,EAA0BZ,GAA1B,CAAb,CANkC;AAOxCoB,QAAAA,KAAK,EAAER,IAAI,CAACQ,KAP4B;AAQxCC,QAAAA,QAAQ,EAAEnB,KAAK,CAACmB,QARwB;AASxCC,QAAAA,SAAS,EAAEpB,KAAK,CAACoB,SATuB;AAUxCC,QAAAA,cAAc,EAAErB,KAAK,CAACqB;AAVkB,OAAnC,CAAP;AAYD,KAbW,EAaT,IAbS,CAAZ;AAeA,WAAO3C,KAAK,CAACiC,aAAN,CACL,GADK,EAEL;AAAEW,MAAAA,SAAS,EAAEtB,KAAK,CAACsB,SAAnB;AAA8BC,MAAAA,SAAS,EAAE;AAAzC,KAFK,EAGLf,KAHK,CAAP;AAKD;AAtD+B,CAAD,CAAjC","sourcesContent":["'use strict';\n\nvar PropTypes = require('prop-types');\nvar React = require('react');\nvar createReactClass = require('create-react-class');\n\nvar d3 = require('d3');\nvar CellContainer = require('./CellContainer');\n\nmodule.exports = createReactClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data: PropTypes.array,\n    colors: PropTypes.func,\n    colorAccessor: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      data: [],\n      colors: d3.scale.category20c(),\n      colorAccessor: function colorAccessor(d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function render() {\n    var props = this.props;\n\n    var treemap = d3.layout.treemap()\n    // make sure calculation loop through all objects inside array\n    .children(function (d) {\n      return d;\n    }).size([props.width, props.height]).sticky(true).value(function (d) {\n      return d.value;\n    });\n\n    var tree = treemap(props.data);\n\n    var cells = tree.map(function (node, idx) {\n      return React.createElement(CellContainer, {\n        key: idx,\n        x: node.x,\n        y: node.y,\n        width: node.dx,\n        height: node.dy,\n        fill: props.colors(props.colorAccessor(node, idx)),\n        label: node.label,\n        fontSize: props.fontSize,\n        textColor: props.textColor,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n\n    return React.createElement(\n      'g',\n      { transform: props.transform, className: 'treemap' },\n      cells\n    );\n  }\n});"]},"metadata":{},"sourceType":"script"}