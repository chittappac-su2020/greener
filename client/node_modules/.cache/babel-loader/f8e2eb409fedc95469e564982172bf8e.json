{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\naxios.defaults.baseURL = 'http://localhost:5000'; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const sendMail = mData => dispatch => {\n  axios.post(\"/api/newusermail\", mData).then(response => {\n    console.log(response);\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/apple/Documents/WebDesign/Greener/final-project/greener-mern/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","defaults","baseURL","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","sendMail","mData","console","log","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,QAIO,SAJP;AAOAL,KAAK,CAACM,QAAN,CAAeC,OAAf,GAAyB,uBAAzB,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DX,EAAAA,KAAK,CACFY,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAEuC;AAFvC,GAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM;AAWP,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAWZ,QAAQ,IAAI;AAC7CX,EAAAA,KAAK,CACJY,IADD,CACM,kBADN,EAC0BW,KAD1B,EAECV,IAFD,CAEOO,QAAD,IAAa;AACjBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,GAJD,EAKCJ,KALD,CAKOC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF;AAFF,GAAD,CANV;AAWD,CAZM,C,CAaP;;AACA,OAAO,MAAMS,SAAS,GAAGjB,QAAQ,IAAIE,QAAQ,IAAI;AAC/CX,EAAAA,KAAK,CACFY,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACN;AAFiB,UAGHa,KAHG,GAGOb,GAAG,CAACO,IAHX,CAGHM,KAHG;AAIXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACA1B,IAAAA,YAAY,CAAC0B,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAG5B,UAAU,CAACyB,KAAD,CAA1B,CARW,CASX;;AACAhB,IAAAA,QAAQ,CAACoB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGd,KAdH,CAcSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEf,UADC;AAEPgB,IAAAA,OAAO,EAAEF;AAFF,GAAD,CAfZ;AAoBD,CArBM,C,CAsBP;;AACA,OAAO,MAAMc,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLZ,IAAAA,IAAI,EAAEd,gBADD;AAELe,IAAAA,OAAO,EAAEW;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLd,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAM4B,UAAU,GAAG,MAAMtB,QAAQ,IAAI;AAC1C;AACAiB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAjC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAU,EAAAA,QAAQ,CAACoB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n\naxios.defaults.baseURL = 'http://localhost:5000';\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\nexport const sendMail = (mData) => dispatch => {\n  axios\n  .post(\"/api/newusermail\", mData)\n  .then((response)=> {\n    console.log(response);\n  })\n  .catch(err =>\n    dispatch({\n      type: GET_ERRORS,\n      payload: err\n    })\n  );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}